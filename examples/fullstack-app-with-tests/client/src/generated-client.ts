//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ComputerStoreClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getComputers(request: SievePlusRequestOfComputerQueryModel): Promise<Computer[]> {
        let url_ = this.baseUrl + "/api/ComputerStore/GetComputers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetComputers(_response);
        });
    }

    protected processGetComputers(response: Response): Promise<Computer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Computer[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Computer[]>(null as any);
    }

    getBrands(request: SievePlusRequestOfBrandQueryModel): Promise<Brand[]> {
        let url_ = this.baseUrl + "/api/ComputerStore/GetBrands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBrands(_response);
        });
    }

    protected processGetBrands(response: Response): Promise<Brand[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Brand[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Brand[]>(null as any);
    }

    getCategories(request: SievePlusRequestOfCategoryQueryModel): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/ComputerStore/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Category[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }
}

export interface Computer {
    id: string;
    name: string;
    processor: string;
    price: number;
    screenSize: number;
    ram: number;
    storage: number;
    graphicsCard: string;
    inStock: boolean;
    rating: number;
    sales: number;
    createdAt: string;
    brandId: string | undefined;
    brand: Brand | undefined;
    categoryId: string | undefined;
    category: Category | undefined;
}

export interface Brand {
    id: string;
    name: string;
    createdAt: string;
    computers: Computer[];
}

export interface Category {
    id: string;
    name: string;
    createdAt: string;
    computers: Computer[];
}

/** Strongly-typed Sieve request that includes the query model type for OpenAPI/Swagger generation. Use this in controller methods to expose the available query properties to API clients. */
export interface SievePlusRequestOfComputerQueryModel {
    /** Filter string (e.g., "price>=1000,inStock==true")
Properties available for filtering are defined in . */
    filters: string | undefined;
    /** Sort string (e.g., "price,-rating")
Properties available for sorting are defined in . */
    sorts: string | undefined;
    /** Page number (1-based) */
    page: number | undefined;
    /** Page size */
    pageSize: number | undefined;
    /** The query model that defines all available properties for filtering and sorting.
This property is never used at runtime - it's only here to expose the query model structure to OpenAPI/Swagger. */
    queryModel: ComputerQueryModel | undefined;
}

export interface ComputerQueryModel {
    id: string;
    name: string;
    processor: string;
    price: number;
    screenSize: number;
    ram: number;
    storage: number;
    graphicsCard: string;
    inStock: boolean;
    rating: number;
    createdAt: string;
    brandName: string;
    categoryName: string;
    isPopular: boolean | undefined;
    isPremium: boolean | undefined;
    isHighPerformance: boolean | undefined;
}

/** Strongly-typed Sieve request that includes the query model type for OpenAPI/Swagger generation. Use this in controller methods to expose the available query properties to API clients. */
export interface SievePlusRequestOfBrandQueryModel {
    /** Filter string (e.g., "price>=1000,inStock==true")
Properties available for filtering are defined in . */
    filters: string | undefined;
    /** Sort string (e.g., "price,-rating")
Properties available for sorting are defined in . */
    sorts: string | undefined;
    /** Page number (1-based) */
    page: number | undefined;
    /** Page size */
    pageSize: number | undefined;
    /** The query model that defines all available properties for filtering and sorting.
This property is never used at runtime - it's only here to expose the query model structure to OpenAPI/Swagger. */
    queryModel: BrandQueryModel | undefined;
}

export interface BrandQueryModel {
    id: string;
    name: string;
    createdAt: string;
    computerCount: number;
}

/** Strongly-typed Sieve request that includes the query model type for OpenAPI/Swagger generation. Use this in controller methods to expose the available query properties to API clients. */
export interface SievePlusRequestOfCategoryQueryModel {
    /** Filter string (e.g., "price>=1000,inStock==true")
Properties available for filtering are defined in . */
    filters: string | undefined;
    /** Sort string (e.g., "price,-rating")
Properties available for sorting are defined in . */
    sorts: string | undefined;
    /** Page number (1-based) */
    page: number | undefined;
    /** Page size */
    pageSize: number | undefined;
    /** The query model that defines all available properties for filtering and sorting.
This property is never used at runtime - it's only here to expose the query model structure to OpenAPI/Swagger. */
    queryModel: CategoryQueryModel | undefined;
}

export interface CategoryQueryModel {
    id: string;
    name: string;
    createdAt: string;
    computerCount: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}